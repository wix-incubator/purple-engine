#!/usr/bin/env node

const _ = require('lodash');
const path = require('path');

const fs = require('fs');

const child_process = require('child_process');

const baseDir = `${__dirname}/..`;
const config = require(path.join(process.cwd(), 'package.json')).purple;

if(config.purpleDevProjectStructure !== true) {
  process.chdir(`${__dirname}/../../..`);

  const xcode_libs_link = 'node_modules/purple-engine/xcode_libs_link'
  child_process.execSync(`rm ${xcode_libs_link}`);
  child_process.execSync(`ln -s ../../node_modules ${xcode_libs_link}`);
} else {
  process.chdir(`${__dirname}/..`);
}

const modulesRequires = _.map(config.modules, (m) => `require('${m}').default`).join(', ');
const fileName = config.purpleDevProjectStructure === true ? `${baseDir}/src/modules.js` : 'node_modules/purple-engine/src/modules.js';
fs.writeFileSync(fileName, 
`
// This file is auto-generated by purple

export default [${modulesRequires}];
`
);

console.log(`cwd: ${process.cwd()}`);
const rnRoots = [baseDir].concat(config.roots).join(',');
console.log(`Running in background: react-native start --root "${rnRoots}"`);
child_process.exec(`react-native start --root "${rnRoots}"`);
console.log(`Running sync: react-native run-ios --no-packager --project-path "${baseDir}"/ios/`);
child_process.execSync(`react-native run-ios --no-packager --project-path "${baseDir}"/ios/`);
